PARSER_BEGIN(LangParser)

class LangParser {
    public static void main(String[] args) throws ParseException {
        try{
            LangParser analyser = new LangParser(System.in);
            analyser.Program();
            System.out.println("Successful compilation");
        } catch(ParseException pe) {
            System.out.println(pe.getMessage());
            System.out.println("ERRORES");
        }
    }
}
PARSER_END(LangParser)

TOKEN: {
        <MAIN: "public static void Main()">{System.out.println("MAIN ->"+image);}
    |   <PROGRAM: "Program">{System.out.println("PROGRAM ->"+image);}
}

TOKEN: {
        <LBRACKET: "(">{System.out.println("(" + image + ",token)");}
    |   <RBRACKET: ")">{System.out.println("(" + image + ",token)");}
    |   <SLBRACKET: "[">{System.out.println("(" + image + ",token)");}
    |   <SRBRACKET: "]">{System.out.println("(" + image + ",token)");}
    |   <CLBRACKET: "{">{System.out.println("(" + image + ",token)");}
    |   <CRBRACKET: "}">{System.out.println("(" + image + ",token)");}
    |   <EQUAL: "=">{System.out.println("(" + image + ",token)");}
    |   <SEMICOLON: ";">{System.out.println("(" + image + ",token)");}
    |   <COMMA: ",">{System.out.println("(" + image + ",token)");}
    |   <CSLASH: "//">{System.out.println("(" + image + ",token)");}

}

TOKEN: {
        <VARIABLE: "Var">{System.out.println("(" + image + ",identifier)");}
    |   <SET: "Set">{System.out.println("(" + image + ",keyword)");}
    |   <INCREMENT: "Add+">{System.out.println("(" + image + ",keyword)");}
    |   <DECREMENT: "Less-">{System.out.println("(" + image + ",keyword)");}
    |   <BEGIN: "Begin">{System.out.println("(" + image + ",keyword)");}
    |   <END: "End">{System.out.println("(" + image + ",keyword)");}
    |   <PROC: "Proc">{System.out.println("(" + image + ",keyword)");}
    |   <ENDPROC: "End-Proc">{System.out.println("(" + image + ",keyword)");}
    |   <PLACEBLOCK: "Place Block">{System.out.println("(" + image + ",keyword)");}
    |   <HIGHBLOCK: "High Block">{System.out.println("(" + image + ",keyword)");}
    |   <POSFUNC: "Pos">{System.out.println("(" + image + ",keyword)");}
    |   <PUTLIGHT: "Put Light">{System.out.println("(" + image + ",keyword)");}
    |   <KEEP: "Keep">{System.out.println("(" + image + ",keyword)");}
    |   <KEND: "Kend">{System.out.println("(" + image + ",keyword)");}
    |   <TIMES: "Times">{System.out.println("(" + image + ",keyword)");}
    |   <SKP: "Skip">{System.out.println("(" + image + ",keyword)");}
    |   <FOR: "For">{System.out.println("(" + image + ",keyword)");}
    |   <FEND: "FEnd">{System.out.println("(" + image + ",keyword)");}
    |   <WHEN: "When">{System.out.println("(" + image + ",keyword)");}
    |   <WHEND: "Whend">{System.out.println("(" + image + ",keyword)");}
    |   <THEN: "Then">{System.out.println("(" + image + ",keyword)");}
    |   <POSSTARTFUNC: "PosStart">{System.out.println("(" + image + ",keyword)");}
    |   <CALL: "Call">{System.out.println("(" + image + ",keyword)");}
    |   <CHANGEDIR: "ChangeDir">{System.out.println("(" + image + ",keyword)");}
    |   <RIGHT: "RIGHT">{System.out.println("(" + image + ",keyword)");}
    |   <LEFT: "LEFT">{System.out.println("(" + image + ",keyword)");}
    |   <UP: "UP">{System.out.println("(" + image + ",keyword)");}
    |   <DOWN: "DOWN">{System.out.println("(" + image + ",keyword)");}

}

TOKEN: {
        <INTEGER: (["0"-"9"])+>{System.out.println("(" + image + ",integer)");}
    |   <PROCNAME: ["A"-"Z"](["A"-"Z","a"-"z","0"-"9"])*>{System.out.println("(" + image + ",identifier)");}
    |   <IDENTIFIER: ["a"-"z"](["A"-"Z","a"-"z","0"-"9","_","@","*"])*>{System.out.println("(" + image + ",identifier)");}
}

SKIP: {
        " " | "\r\n" | "\t"
}

void Program() : {}
{
    IdField()
    Main()
    Procedures()
    <EOF>
}

void Main() : {}
{
    <BEGIN>Expressions()<END>
}

void VarDeclaration() : {}
{
    <VARIABLE><IDENTIFIER>(<SEMICOLON> | <EQUAL><INTEGER><SEMICOLON>)
}

void VarSet() : {}
{
    <SET><IDENTIFIER><EQUAL><INTEGER><SEMICOLON>
}

void VarIncrement() : {}
{
    <INCREMENT><IDENTIFIER><SEMICOLON>
}

void VarDecrement() : {}
{
    <DECREMENT><IDENTIFIER><SEMICOLON>
}

void PlaceBlock() : {}
{
    <PLACEBLOCK>(<INTEGER><SEMICOLON> | <SEMICOLON>)
}

void HighBlock() : {}
{
    <HIGHBLOCK>(<INTEGER><SEMICOLON> | <SEMICOLON>)
}

void PosFunc() : {}
{
    <POSFUNC><LBRACKET><IDENTIFIER><COMMA><IDENTIFIER><RBRACKET><SEMICOLON>
}

void PutLight() : {}
{
    <PUTLIGHT><SEMICOLON>
}

void KeepStatement() : {}
{
    <KEEP>Expressions()<SKP><KEND><SEMICOLON>
}

void ForStatement() : {}
{
    <FOR><IDENTIFIER><EQUAL><INTEGER><TIMES>Expressions()<FEND><SEMICOLON>
}

void WhenStatement() : {}
{
    <WHEN><IDENTIFIER><EQUAL><INTEGER><THEN>Expressions()<WHEND><SEMICOLON>
}

void PosStartFunc() : {}
{
    <POSSTARTFUNC><LBRACKET><IDENTIFIER><COMMA><IDENTIFIER><RBRACKET><SEMICOLON>
}

void CallProc() : {}
{
    <CALL><IDENTIFIER><SEMICOLON>
}

void ChangeDirFunc() : {}
{
    <CHANGEDIR><LBRACKET><SLBRACKET>(<LEFT>|<RIGHT>|<UP>|<DOWN>)<SRBRACKET><RBRACKET><SEMICOLON>
}

void Comment() : {}
{
    <CSLASH>(<IDENTIFIER> | <PROCNAME> | <INTEGER>)
}

void IdField() : {}
{
    (VarDeclaration())*
}

void Procedures() : {}
{
    (<PROC><IDENTIFIER>Expressions()<ENDPROC>)*
}

void Expressions() : {}
{
    ( 	VarDeclaration()
        | 	VarSet()
        | 	VarIncrement()
        | 	VarDecrement()
        |   PlaceBlock()
        |   HighBlock()
        |   PosFunc()
        |   PutLight()
        |   KeepStatement()
        |   ForStatement()
        |   WhenStatement()
        |   PosStartFunc()
        |   CallProc()
        |   ChangeDirFunc()
        |   Comment()
    )*
}
