package org.tec.comp.interpreter;/* TestTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TestTokenManager.java */

import org.tec.comp.interpreter.TestConstants;

/** Token Manager. */
@SuppressWarnings("unused")public class TestTokenManager implements TestConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff4ff004L) != 0L)
         {
            jjmatchedKind = 41;
            return 2;
         }
         if ((active0 & 0xb00002L) != 0L)
         {
            jjmatchedKind = 42;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0xb00002L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 4;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 2;
         if ((active0 & 0xbfff4ff004L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x2104a3000L) != 0L)
            return 2;
         if ((active0 & 0xb00002L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return 4;
         }
         if ((active0 & 0xbdef05c004L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0xa5eb040000L) != 0L)
            return 2;
         if ((active0 & 0x300002L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return 4;
         }
         if ((active0 & 0x1a04018004L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 3;
            }
            return 2;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x1084010000L) != 0L)
            return 2;
         if ((active0 & 0x100002L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 4;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xa00000004L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 4;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xa00000004L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x4L) != 0L)
            return 2;
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xa00000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      case 7:
         if ((active0 & 0x200000000L) != 0L)
            return 2;
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      case 8:
         if ((active0 & 0x800000000L) != 0L)
            return 2;
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      case 44:
         return jjStopAtPos(0, 11);
      case 59:
         return jjStopAtPos(0, 10);
      case 61:
         return jjStopAtPos(0, 9);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xc00000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xa0000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x30000000L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x3000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000008000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200440004L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8002000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x104000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0xc0000000L);
      case 91:
         return jjStopAtPos(0, 5);
      case 93:
         return jjStopAtPos(0, 6);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x900002L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400001000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200301a000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x9c0000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004200000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8210400000L);
      case 112:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 2);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800002L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x84000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c1000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000210000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 2);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 2);
         break;
      case 115:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200008000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 43:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         break;
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 2);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000200000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 2);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000L);
      case 112:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 2);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 2);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 2);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000004L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 109:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 2);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(10, 20);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa20_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa24_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(24, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(4); }
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", 
"\160\165\142\154\151\143\40\163\164\141\164\151\143\40\166\157\151\144\40\115\141\151\156\50\51", "\120\162\157\147\162\141\155", "\50", "\51", "\133", "\135", "\173", "\175", 
"\75", "\73", "\54", "\126\141\162", "\123\145\164", "\101\144\144\53", 
"\114\145\163\163\55", "\102\145\147\151\156", "\105\156\144", "\120\162\157\143", 
"\105\156\144\55\120\162\157\143", "\160\154\141\143\145\55\142\154\157\143\153", 
"\150\151\147\150\55\142\154\157\143\153", "\120\157\163", "\160\165\164\55\154\151\147\150\164", "\113\145\145\160", 
"\113\145\156\144", "\124\151\155\145\163", "\123\153\151\160", "\106\157\162", 
"\106\105\156\144", "\127\150\145\156", "\127\150\145\156\144", "\124\150\145\156", 
"\120\157\163\123\164\141\162\164", "\103\141\154\154", "\103\150\141\156\147\145\104\151\162", 
"\122\151\147\150\164", "\114\145\146\164", "\125\160", "\104\157\167\156", null, null, null, null, 
null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                                            System.out.println("MAIN ->"+image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                             System.out.println("PROGRAM ->"+image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                        System.out.println("LBRACKET ->"+image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                        System.out.println("RBRACKET ->"+image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                         System.out.println("SLBRACKET ->"+image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                         System.out.println("SRBRACKET ->"+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                         System.out.println("CLBRACKET ->"+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                         System.out.println("CRBRACKET ->"+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                     System.out.println("EQUAL ->"+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                         System.out.println("SEMICOLON ->"+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                     System.out.println("COMMA ->"+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                          System.out.println("VARIABLE ->"+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                     System.out.println("SET ->"+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                            System.out.println("INCREMENT ->"+image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                             System.out.println("DECREMENT ->"+image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                         System.out.println("BEGIN ->"+image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                     System.out.println("END ->"+image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                       System.out.println("PROC ->"+image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                              System.out.println("ENDPROC ->"+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                                    System.out.println("PLACEBLOCK ->"+image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                                  System.out.println("HIGHBLOCK ->"+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                         System.out.println("POSFUNC ->"+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                System.out.println("PUTLIGHT ->"+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                       System.out.println("KEEP ->"+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                       System.out.println("KEND ->"+image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                         System.out.println("TIMES ->"+image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                      System.out.println("Skip ->"+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                     System.out.println("FOR ->"+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                       System.out.println("FEND ->"+image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                       System.out.println("WHEN ->"+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                         System.out.println("WHEND ->"+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                       System.out.println("THEN ->"+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                   System.out.println("POSSTARTFUNC ->"+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                       System.out.println("CALL ->"+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                 System.out.println("CHANGEDIR ->"+image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                         System.out.println("RIGHT ->"+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                       System.out.println("LEFT ->"+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                   System.out.println("UP ->"+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                       System.out.println("DOWN ->"+image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("INTEGER ->"+image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          System.out.println("PROCNAME ->"+image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                        System.out.println("IDENTIFIER ->"+image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public TestTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public TestTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x380000000000L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[5];
    static private final int[] jjstateSet = new int[2 * 5];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
