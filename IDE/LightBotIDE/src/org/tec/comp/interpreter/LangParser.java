/* LangParser.java */
/* Generated By:JavaCC: Do not edit this line. LangParser.java */
package org.tec.comp.interpreter;

import org.tec.comp.Message_Handler;
import org.tec.comp.game.Direction;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;

public class LangParser implements TestConstants {

    public static ArrayList<String> msg_list = new ArrayList<>();
    public static ArrayList<Variable> var_list = new ArrayList<>();
    public static ArrayList<Variable> mod_var_list = new ArrayList<>();
    public static ArrayList<Position_Procedure> code_actions = new ArrayList<>();
    public static ArrayList<Multiple_Action_Container> code_procedures = new ArrayList<>();

    private static int proc_counter = 0;
    private static Position_Procedure current_pos_proc = new Position_Procedure();
    private static Multiple_Action_Container current_loop; // KEEP, FOR, WHEN.
    private static Multiple_Action_Container current_proc; // Procedures.
    private static boolean is_loop_active = false;
    private static boolean is_proc_active = false;


    /*public static void main(String[] args) throws ParseException {
        try{
            Test analyser = new Test(System.in);
            analyser.Program();
            System.out.println("Successful compilation");
        } catch(ParseException pe) {
            System.out.println(pe.getMessage());
            System.out.println("ERRORS");
        }
    }*/

    static private Variable find_mod_var(String id) {
        for(Variable v : mod_var_list) {
            if(v.get_id().equals(id)) return v;
        }
        return null;
    }

    static private Variable find_var(String id) {
        for(Variable v : var_list) {
            if(v.get_id().equals(id)) return v;
        }
        return null;
    }

    static private Multiple_Action_Container find_proc(String name) {
        for(Multiple_Action_Container c : code_procedures) {
            if(c.get_proc_name().equals(name)) return c;
        }
        return null;
    }

    static public void parse(String file) {
        try{
            clean_compilation_data();
            LangParser analyser = new LangParser(new BufferedReader(new FileReader(file)));
            analyser.Program();
            System.out.println("Successful compilation"); //  TODO: FROM HERE THE MAP CONSTRUCTION SHOULD BEGIN.
            System.out.println(var_list);
            System.out.println(code_actions);
            System.out.println(code_procedures);
        } catch(ParseException pe) {
            msg_list.add(pe.getMessage());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    static public void clean_compilation_data() {
        msg_list.clear();
        var_list.clear();
        code_actions.clear();
        mod_var_list.clear();
    }

    static final public void Program() throws ParseException {
        IdField();
        Main();
        Procedures();
        jj_consume_token(0);
        code_actions.add(current_pos_proc);
    }

    static final public void Main() throws ParseException {
        jj_consume_token(BEGIN);
        jj_consume_token(LBRACKET);
        Expressions();
        jj_consume_token(RBRACKET);
        jj_consume_token(END);
    }

    static final public void VarDeclaration() throws ParseException {
        jj_consume_token(VARIABLE);
        Token id_token = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SEMICOLON:{
                jj_consume_token(SEMICOLON);
                Variable mod_var;
                Variable unmod_var;
                if(is_loop_active) {
                    mod_var = new Variable(id_token.image, false);
                    unmod_var = new Variable(id_token.image, false);
                    current_loop.add_action_to_container(Action_Type.DECL_VAR, mod_var, null, -1);
                } else if(is_proc_active){
                    mod_var = new Variable(id_token.image, false);
                    unmod_var = new Variable(id_token.image, false);
                    current_proc.add_action_to_container(Action_Type.DECL_VAR, mod_var, null, -1);
                } else {
                    if(current_pos_proc.is_empty())  {
                        mod_var = new Variable(id_token.image, true);
                        unmod_var = new Variable(id_token.image, false);
                    }
                    else{
                        mod_var = new Variable(id_token.image, false);
                        unmod_var = new Variable(id_token.image, false);
                        current_pos_proc.add_action(Action_Type.DECL_VAR, mod_var, null, -1);
                    }
                }
                var_list.add(unmod_var);
                mod_var_list.add(mod_var);
                break;
            }
            case EQUAL:{
                jj_consume_token(EQUAL);
                Token value_token = jj_consume_token(INTEGER);
                jj_consume_token(SEMICOLON);
                Variable mod_var;
                Variable unmod_var;
                if(is_loop_active) {
                    mod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                    unmod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                    current_loop.add_action_to_container(Action_Type.DECL_VAR, mod_var, null, -1);
                } else if(is_proc_active) {
                    mod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                    unmod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                    current_proc.add_action_to_container(Action_Type.DECL_VAR, mod_var, null, -1);
                } else {
                    if(current_pos_proc.is_empty()) {
                        mod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), true);
                        unmod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), true);
                    }
                    else {
                        mod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                        unmod_var = new Variable(id_token.image, Integer.parseInt(value_token.image), false);
                        current_pos_proc.add_action(Action_Type.DECL_VAR, mod_var, null, -1);
                    }
                }
                var_list.add(unmod_var);
                mod_var_list.add(mod_var);
                break;
            }
            default:
                jj_la1[0] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void VarSet() throws ParseException {
        jj_consume_token(SET);
        Token token_id = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUAL);
        Token token_val = jj_consume_token(INTEGER);
        jj_consume_token(SEMICOLON);

        Variable mod_var = find_mod_var(token_id.image);
        Variable unmod_var = find_var(token_id.image); //

        try{ // If mod_var is null the variable doesn't exist, so there's an error thrown in the console of the IDE.
            mod_var.set_value(Integer.parseInt(token_val.image));
            if(is_loop_active) {
                current_loop.add_action_to_container(Action_Type.SET_VAR, unmod_var, null, Integer.parseInt(token_val.image));
            } else if(is_proc_active) {
                current_proc.add_action_to_container(Action_Type.SET_VAR, unmod_var, null, Integer.parseInt(token_val.image));
            } else {
                current_pos_proc.add_action(Action_Type.SET_VAR, unmod_var, null, Integer.parseInt(token_val.image));
            }
        } catch (NullPointerException npe) {
            msg_list.add(Message_Handler.no_such_var_found(token_id.image));
        }
    }

    static final public void VarIncrement() throws ParseException {
        jj_consume_token(INCREMENT);
        Token token_id = jj_consume_token(IDENTIFIER);
        jj_consume_token(SEMICOLON);

        Variable var = find_mod_var(token_id.image);
        Variable unmod_var = find_var(token_id.image);

        try {
            var.increment();
            if (is_loop_active) {
                current_loop.add_action_to_container(Action_Type.INCR_VAR, unmod_var, null, -1);
            } else if(is_proc_active) {
                current_proc.add_action_to_container(Action_Type.INCR_VAR, unmod_var, null, -1);
            } else {
                current_pos_proc.add_action(Action_Type.INCR_VAR, unmod_var, null, -1);
            }
        } catch (NullPointerException npe) {
            msg_list.add(Message_Handler.no_such_var_found(token_id.image));
        }
    }

    static final public void VarDecrement() throws ParseException {
        jj_consume_token(DECREMENT);
        Token token_id = jj_consume_token(IDENTIFIER);
        jj_consume_token(SEMICOLON);

        Variable mod_var = find_mod_var(token_id.image);
        Variable unmod_var = find_var(token_id.image);

        try {
            mod_var.decrement();
            if (is_loop_active) {
                current_loop.add_action_to_container(Action_Type.DECR_VAR, unmod_var, null, -1);
            } else if(is_proc_active) {
                current_proc.add_action_to_container(Action_Type.DECR_VAR, unmod_var, null, -1);
            } else {
                current_pos_proc.add_action(Action_Type.DECR_VAR, unmod_var, null, -1);
            }
        } catch (NullPointerException npe) {
            msg_list.add(Message_Handler.no_such_var_found(token_id.image));
        }
    }

    static final public void PlaceBlock() throws ParseException {
        jj_consume_token(PLACEBLOCK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEGER:{
                Token token_n = jj_consume_token(INTEGER); // block quantity n (placeblock n).
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.PLACE_BLOCK, Integer.parseInt(token_n.image));
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.PLACE_BLOCK, Integer.parseInt(token_n.image));
                }else {
                    current_pos_proc.add_action(Action_Type.PLACE_BLOCK, Integer.parseInt(token_n.image));
                }
                jj_consume_token(SEMICOLON);
                break;
            }
            case SEMICOLON:{
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.PLACE_BLOCK, 1);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.PLACE_BLOCK, 1);
                }else {
                    current_pos_proc.add_action(Action_Type.PLACE_BLOCK, 1);
                }
                jj_consume_token(SEMICOLON);
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                ParseException pe = new ParseException(); // Add syntax exception to msg list.
                msg_list.add(pe.getMessage());
        }
    }

    static final public void HighBlock() throws ParseException {
        jj_consume_token(HIGHBLOCK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEGER:{
                Token token_height = jj_consume_token(INTEGER);
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.PLACE_HIGH, Integer.parseInt(token_height.image));
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.PLACE_HIGH, Integer.parseInt(token_height.image));
                }else {
                    current_pos_proc.add_action(Action_Type.PLACE_HIGH, Integer.parseInt(token_height.image));
                }
                jj_consume_token(SEMICOLON);
                break;
            }
            case SEMICOLON:{
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.PLACE_HIGH, 2);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.PLACE_HIGH, 2);
                }else {
                    current_pos_proc.add_action(Action_Type.PLACE_HIGH, 2);
                }
                jj_consume_token(SEMICOLON);
                break;
            }
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                ParseException pe = new ParseException(); // Add syntax exception to msg list.
                msg_list.add(pe.getMessage());
        }
    }

    static final public void PosFunc() throws ParseException {
        jj_consume_token(POSFUNC);
        jj_consume_token(LBRACKET);
        Token token_id1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(COMMA);
        Token token_id2 = jj_consume_token(IDENTIFIER);
        jj_consume_token(RBRACKET);
        jj_consume_token(SEMICOLON);

        Variable param1 = find_mod_var(token_id1.image);
        Variable param2 = find_mod_var(token_id2.image);

        try {
            if(current_pos_proc.is_empty()) {
                current_pos_proc.set_id(proc_counter++);
                current_pos_proc.set_proc_pos(param1.get_val(), param2.get_val());
            }
            else {
                code_actions.add(current_pos_proc);
                current_pos_proc = new Position_Procedure(proc_counter++, param1.get_val(), param2.get_val());
            }
        } catch (NullPointerException npe) {
            if(param1 == null) {
                msg_list.add(Message_Handler.no_such_var_found(token_id1.image));
            } else if(param2 == null) {
                msg_list.add(Message_Handler.no_such_var_found(token_id2.image));
            }
        }
    }


    static final public void PutLight() throws ParseException {
        jj_consume_token(PUTLIGHT);
        jj_consume_token(SEMICOLON);
        if (is_loop_active) {
            current_loop.add_action_to_container(Action_Type.PUT_LIGHT, -1);
        } else if(is_proc_active) {
            current_proc.add_action_to_container(Action_Type.PUT_LIGHT, -1);
        }else {
            current_pos_proc.add_action(Action_Type.PUT_LIGHT, -1);
        }
    }

    static final public void KeepStatement() throws ParseException {
        is_loop_active = true;
        current_loop = new Multiple_Action_Container();
        jj_consume_token(KEEP);
        Expressions();
        jj_consume_token(SKP);
        jj_consume_token(KEND);
        jj_consume_token(SEMICOLON);
        if(is_proc_active) current_proc.add_action_to_container(Action_Type.KEEP_LOOP, current_loop);
        else current_pos_proc.add_action(Action_Type.KEEP_LOOP, current_loop);
        is_loop_active = false;
    }

    static final public void ForStatement() throws ParseException {
        is_loop_active = true;
        jj_consume_token(FOR);
        Token token_id = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUAL);
        Token token_ctr = jj_consume_token(INTEGER);
        current_loop = new Multiple_Action_Container(token_id.image, Integer.parseInt(token_ctr.image));
        var_list.add(new Variable(token_id.image, Integer.parseInt(token_ctr.image), false));
        jj_consume_token(TIMES);
        Expressions();
        jj_consume_token(FEND);
        jj_consume_token(SEMICOLON);
        if(is_proc_active) current_proc.add_action_to_container(Action_Type.FOR_LOOP, current_loop);
        else current_pos_proc.add_action(Action_Type.FOR_LOOP, current_loop);
        is_loop_active = false;
    }

    static final public void WhenStatement() throws ParseException {
        is_loop_active = true;
        jj_consume_token(WHEN);
        Token token_id = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUAL);
        Token token_ctr = jj_consume_token(INTEGER);
        current_loop = new Multiple_Action_Container(token_id.image, Integer.parseInt(token_ctr.image));
        jj_consume_token(THEN);
        Expressions();
        jj_consume_token(WHEND);
        jj_consume_token(SEMICOLON);
        if(is_proc_active)  current_proc.add_action_to_container(Action_Type.WHEN_LOOP, current_loop);
        else current_pos_proc.add_action(Action_Type.WHEN_LOOP, current_loop);
        is_loop_active = false;
    }

    static final public void PosStartFunc() throws ParseException {
        jj_consume_token(POSSTARTFUNC);
        jj_consume_token(LBRACKET);
        Token token_id1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(COMMA);
        Token token_id2 =jj_consume_token(IDENTIFIER);
        jj_consume_token(RBRACKET);
        jj_consume_token(SEMICOLON);

        Variable param1 = find_mod_var(token_id1.image);
        Variable param2 = find_mod_var(token_id2.image);

        try {
            param1.get_id();
            param2.get_id();
            current_pos_proc.add_action(Action_Type.POS_START, param1, param2, -1);
        } catch (NullPointerException npe) {
            if(param1 == null) {
                msg_list.add(Message_Handler.no_such_var_found(token_id1.image));
            } else if(param2 == null) {
                msg_list.add(Message_Handler.no_such_var_found(token_id2.image));
            }
        }
    }

    static final public void CallProc() throws ParseException {
        jj_consume_token(CALL);
        Token token_id = jj_consume_token(PROCNAME);
        //Multiple_Action_Container proc_called = find_proc(token_id.image);

        //proc_called.get_proc_name();
        if(is_loop_active) {
            current_loop.add_action_to_container(Action_Type.CALL_PROC, token_id.image);
        } else if(is_proc_active) {
            current_proc.add_action_to_container(Action_Type.CALL_PROC, token_id.image);
        } else {
            current_pos_proc.add_action(Action_Type.CALL_PROC, token_id.image);
        }
        jj_consume_token(SEMICOLON);
    }

    static final public void ChangeDirFunc() throws ParseException {
        jj_consume_token(CHANGEDIR);
        jj_consume_token(LBRACKET);
        jj_consume_token(SLBRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEFT:{
                jj_consume_token(LEFT);
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.CHANGE_DIR, Direction.LEFT);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.CHANGE_DIR, Direction.LEFT);
                } else {
                    current_pos_proc.add_action(Action_Type.CHANGE_DIR, Direction.LEFT);
                }
                break;
            }
            case RIGHT:{
                jj_consume_token(RIGHT);
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.CHANGE_DIR, Direction.RIGHT);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.CHANGE_DIR, Direction.RIGHT);
                } else {
                    current_pos_proc.add_action(Action_Type.CHANGE_DIR, Direction.RIGHT);
                }
                break;
            }
            case UP:{
                jj_consume_token(UP);
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.CHANGE_DIR, Direction.UP);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.CHANGE_DIR, Direction.UP);
                } else {
                    current_pos_proc.add_action(Action_Type.CHANGE_DIR, Direction.UP);
                }
                break;
            }
            case DOWN:{
                jj_consume_token(DOWN);
                if (is_loop_active) {
                    current_loop.add_action_to_container(Action_Type.CHANGE_DIR, Direction.DOWN);
                } else if(is_proc_active) {
                    current_proc.add_action_to_container(Action_Type.CHANGE_DIR, Direction.DOWN);
                } else {
                    current_pos_proc.add_action(Action_Type.CHANGE_DIR, Direction.DOWN);
                }
                break;
            }
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(SRBRACKET);
        jj_consume_token(RBRACKET);
        jj_consume_token(SEMICOLON);
    }

  static final public void IdField() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      VarDeclaration();
    }
  }

  static final public void Procedures() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROC:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      is_proc_active = true;
      jj_consume_token(PROC);
      Token token_id = jj_consume_token(PROCNAME);
      current_proc = new Multiple_Action_Container(token_id.image);
      Expressions();
      jj_consume_token(ENDPROC);
      is_proc_active = false;
      code_procedures.add(current_proc);
    }
  }

  static final public void Expressions() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:
      case SET:
      case INCREMENT:
      case DECREMENT:
      case PLACEBLOCK:
      case HIGHBLOCK:
      case POSFUNC:
      case PUTLIGHT:
      case KEEP:
      case FOR:
      case WHEN:
      case POSSTARTFUNC:
      case CALL:
      case CHANGEDIR:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VARIABLE:{
        VarDeclaration();
        break;
        }
      case SET:{
        VarSet();
        break;
        }
      case INCREMENT:{
        VarIncrement();
        break;
        }
      case DECREMENT:{
        VarDecrement();
        break;
        }
      case PLACEBLOCK:{
        PlaceBlock();
        break;
        }
      case HIGHBLOCK:{
        HighBlock();
        break;
        }
      case POSFUNC:{
        PosFunc();
        break;
        }
      case PUTLIGHT:{
        PutLight();
        break;
        }
      case KEEP:{
        KeepStatement();
        break;
        }
      case FOR:{
        ForStatement();
        break;
        }
      case WHEN:{
        WhenStatement();
        break;
        }
      case POSSTARTFUNC:{
        PosStartFunc();
        break;
        }
      case CALL:{
        CallProc();
        break;
        }
      case CHANGEDIR:{
        ChangeDirFunc();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        ParseException pe = new ParseException(); // Add syntax exception to msg list.
        msg_list.add(pe.getMessage());
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TestTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600,0x400,0x400,0x0,0x1000,0x40000,0x51f0f000,0x51f0f000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x100,0xf0,0x0,0x0,0xe,0xe,};
   }

  /** Constructor with InputStream. */
  public LangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LangParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LangParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LangParser(TestTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
