package interpreter;

import java.util.ArrayList;

import misc.Stream_Handler;
import misc.Util;

/**
 * Analizador Léxico
 *
 */
public class Lexical_Handler {
	
	private ArrayList<String> lang_keywords;
	private final int id_length = 10;
	
	public Lexical_Handler() {
		lang_keywords = Stream_Handler.get_lines_as_list("keywords.txt");
	}
	
	public void validate_code(String scode, String file_name) {
		ArrayList<String> error_msgs = new ArrayList<String>();
		ArrayList<String> code_lines = Stream_Handler.get_lines_as_list(file_name); // TODO: separarlas por ; en caso de haber mas una instr en una linea.
		ArrayList<Variable> vars = search_vars(code_lines, error_msgs);
	}
	
	public ArrayList<Operator> search_operators(ArrayList<String> code_lines, ArrayList<Variable> code_vars, ArrayList<String> error_arr) {
		ArrayList<Operator> ops = new ArrayList<Operator>();
		String[] operators = {"set","add+","subs-"};
		for(String s : code_lines) {
			String[] curr_line = s.split("\\s+");
			for(int i = 0; i < curr_line.length; i++) {
				String curr_word = curr_line[i];
				if(Util.contains_str(operators, curr_word)) {
					if(curr_word.equals(operators[0])) { // verifica si es un operador SET
						String op_var = curr_line[i + 1];
						if(var_exists(code_vars, op_var)) {
							if(curr_line[i + 2].equals("=") && ((i + 3) < curr_line.length && Util.is_int(Util.remove_last_char(curr_line[i + 3]))))
								ops.add(new Operator(1, op_var, Integer.parseInt(Util.remove_last_char(curr_line[i + 3]))));
							else error_arr.add(Error_Msg_Handler.build_invalid_set_op_msg(s));
						} else {
							error_arr.add(Error_Msg_Handler.build_unknown_var_msg(op_var));
						}
					} else if(curr_word.equals(operators[1])) { // verifica si es un operador ADD+
						if(var_exists(code_vars, Util.remove_last_char(curr_line[i + 1]))) ops.add(new Operator(2, curr_line[i + 1]));
						else error_arr.add(Error_Msg_Handler.build_unknown_var_msg(curr_line[i + 1]));
					} else if(curr_word.equals(operators[2])) { // verifica si es un operador SUBS-
						if(var_exists(code_vars, Util.remove_last_char(curr_line[i + 1]))) ops.add(new Operator(3, curr_line[i + 1]));
						else error_arr.add(Error_Msg_Handler.build_unknown_var_msg(curr_line[i + 1]));
					}
				}
			}
		}
		return ops;
	}
	
	public ArrayList<Variable> search_vars(ArrayList<String> code_lines, ArrayList<String> error_arr) {
		ArrayList<Variable> vars = new ArrayList<Variable>();
		for(String s : code_lines) {  // loop que recorre cada linea del código.
			String[] curr_line = s.split("\\s+"); // separa cada línea en palabras individuales.
			for(int i = 0; i < curr_line.length; i++) { // itera por el array de palabras individuales.
				String curr_word = curr_line[i]; // la palabra en uso.
				if(curr_word.equals("Var")) { // busca si es una variable al comparar con Var.
					if(curr_line[i + 1].contains(";")) { // Verifica que sea una variable declarada sin asignación.
						String var_name = Util.remove_last_char(curr_line[i + 1]);
						if(is_valid_id(var_name)) vars.add(new Variable(var_name));
						else error_arr.add(Error_Msg_Handler.build_invalid_id_msg(var_name));
					} else if(curr_line[i + 2].equals("=")) { // Verifica que sea una variable declarada y asignada.
						String var_name = curr_line[i + 1];
						if(is_valid_id(var_name)) vars.add(new Variable(var_name, Integer.parseInt(Util.remove_last_char(curr_line[i + 3]))));
						else error_arr.add(Error_Msg_Handler.build_invalid_id_msg(var_name));
					}
				}
			}
		}
		if(vars.isEmpty()) error_arr.add(Error_Msg_Handler.build_no_var_msg());
		return vars;
	}
	
	public boolean has_comment(ArrayList<String> code_lines, ArrayList<String> error_arr) {
		for(String line : code_lines) {
			String[] curr_line = line.split("\\s+");
			if(curr_line[0].equals("//")) return true;
		}
		error_arr.
		return false;
	}
	
	public boolean is_valid_id(String identifier) { //TODO: is private
		char[] id_arr = identifier.toCharArray();
		
		if(Util.is_lowercase(id_arr[0]) && identifier.length() <= id_length && !identifier.isEmpty()) {
			return true;
		}
		return false;
	}
	
	public int check_word(String word) {
		if(lang_keywords.contains(word)) {
			return 1; // 1 means valid keyword.
		} else {
			if(is_keyw_misspelled(word)) return 2; // 2 means keyword misspelled *error*
		}
		return -1; // -1 means is not a keyword
	} 
	
	private boolean is_keyw_misspelled(String word) {
		String lc_word = word.toLowerCase();
		for(String s : lang_keywords) {
			if(s.toLowerCase().equals(lc_word)) return true;
		}
		return false;
	}

	
	private boolean var_exists(ArrayList<Variable> vars, String name) {
		for(Variable v : vars) {
			if(v.get_var_id().equals(name)) return true;
		}
		return false;
	}
	
	
}
